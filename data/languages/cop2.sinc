# COP2 (VU) macro instruction set

# COP2 integer/control registers
define register offset=0x4000 size=4 [
     vi0     vi1     vi2     vi3
     vi4     vi5     vi6     vi7
     vi8     vi9    vi10    vi11
    vi12    vi13    vi14    vi15
     vc0     vc1     vc2     vc3
     vc4     vc5     vc6     vc7
     vc8     vc9    vc10    vc11
    vc12    vc13    vc14    vc15
];

# COP2 floating point registers
define register offset=0x4100 size=16 [
    vf0     vf1     vf2     vf3
    vf4     vf5     vf6     vf7
    vf8     vf9     vf10    vf11
    vf12    vf13    vf14    vf15
    vf16    vf17    vf18    vf19
    vf20    vf21    vf22    vf23
    vf24    vf25    vf26    vf27
    vf28    vf29    vf30    vf31
];

define register offset=0x4100 size=4 [
    vf0w        vf0y        vf0z        vf0x
    vf1w        vf1y        vf1z        vf1x
    vf2w        vf2y        vf2z        vf2x
    vf3w        vf3y        vf3z        vf3x
    vf4w        vf4y        vf4z        vf4x
    vf5w        vf5y        vf5z        vf5x
    vf6w        vf6y        vf6z        vf6x
    vf7w        vf7y        vf7z        vf7x
    vf8w        vf8y        vf8z        vf8x
    vf9w        vf9y        vf9z        vf9x
    vf10w       vf10y       vf10z       vf10x
    vf11w       vf11y       vf11z       vf11x
    vf12w       vf12y       vf12z       vf12x
    vf13w       vf13y       vf13z       vf13x
    vf14w       vf14y       vf14z       vf14x
    vf15w       vf15y       vf15z       vf15x
    vf16w       vf16y       vf16z       vf16x
    vf17w       vf17y       vf17z       vf17x
    vf18w       vf18y       vf18z       vf18x
    vf19w       vf19y       vf19z       vf19x
    vf20w       vf20y       vf20z       vf20x
    vf21w       vf21y       vf21z       vf21x
    vf22w       vf22y       vf22z       vf22x
    vf23w       vf23y       vf23z       vf23x
    vf24w       vf24y       vf24z       vf24x
    vf25w       vf25y       vf25z       vf25x
    vf26w       vf26y       vf26z       vf26x
    vf27w       vf27y       vf27z       vf27x
    vf28w       vf28y       vf28z       vf28x
    vf29w       vf29y       vf29z       vf29x
    vf30w       vf30y       vf30z       vf30x
    vf31w       vf31y       vf31z       vf31x
];

define register offset=0x4300 size=4 [
    vuACC       vuI         vuQ         vuCF
    vuR
];

attach variables [ vuft vufd vufs ] [
    vf0     vf1     vf2     vf3
    vf4     vf5     vf6     vf7
    vf8     vf9     vf10    vf11
    vf12    vf13    vf14    vf15
    vf16    vf17    vf18    vf19
    vf20    vf21    vf22    vf23
    vf24    vf25    vf26    vf27
    vf28    vf29    vf30    vf31
];

attach variables [ vuid ] [
     vi0     vi1     vi2     vi3
     vi4     vi5     vi6     vi7
     vi8     vi9    vi10    vi11
    vi12    vi13    vi14    vi15
     vc0     vc1     vc2     vc3
     vc4     vc5     vc6     vc7
     vc8     vc9    vc10    vc11
    vc12    vc13    vc14    vc15
];

:lqc2 vuft, OFF_BASE                              is prime=54 & OFF_BASE & vuft {
    vuft = *:16 OFF_BASE;
}

:sqc2 vuft, OFF_BASE                              is prime=62 & OFF_BASE & vuft {
    *:16 OFF_BASE = vuft;
}

with : prime=18 {  # COP2

@include "vuupper.sinc"

    :bc2f vuoffset                                is vuop_21_25=0b01000 & vuop_16_20=0b00000 & vuoffset
        { BC2F(vuoffset:4); }
    :bc2fl vuoffset                               is vuop_21_25=0b01000 & vuop_16_20=0b00010 & vuoffset
        { BC2FL(vuoffset:4); }
    :bc2t vuoffset                                is vuop_21_25=0b01000 & vuop_16_20=0b00001 & vuoffset
        { BC2T(vuoffset:4); }
    :bc2tl vuoffset                               is vuop_21_25=0b01000 & vuop_16_20=0b00011 & vuoffset
        { BC2TL(vuoffset:4); }
    :cfc2.I RT, vuccid                            is vuop_21_25=0b00010 & RT & vuccid & vuop_1_10=0b0000000000 & I
        { RT = zext(vuccid:4); }
    :ctc2.I RTsrc, vuccid                         is vuop_21_25=0b00110 & RTsrc & vuccid & vuop_1_10=0b0000000000 & I
        { vuccid = RTsrc:4; }
    :qmfc2.I RT128, vufd                          is vuop_21_25=0b00001 & RT128 & vufd                            & I
        { RT128 = vufd; }
    :qmtc2.I RT128, vufd                          is vuop_21_25=0b00101 & RT128 & vufd   & vuop_1_10=0b0000000000 & I
        { vufd = RT128; }

}
